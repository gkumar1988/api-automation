plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
}

apply from: "$rootDir/dependencies.gradle"

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter:${versions.springboot}"
    implementation "org.springframework.boot:spring-boot-starter-web:${versions.springboot}"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb:${versions.springboot}"
    implementation "io.springfox:springfox-boot-starter:${versions.swagger}"
    implementation "org.projectlombok:lombok:${versions.lombok}"
    implementation "org.testng:testng:${versions.testng}"
    implementation "com.google.truth:truth:${versions.googletruth}"
    implementation "org.json:json:${versions.orgjson}"
    implementation "org.immutables:value:${versions.immutables}"
    implementation "io.rest-assured:rest-assured:${versions.restassured}"
    implementation "io.rest-assured:json-path:${versions.restassured}"
    implementation "io.rest-assured:json-schema-validator:${versions.restassured}"
    implementation "com.opencsv:opencsv:${versions.opencsv}"
    implementation "org.mongodb:mongo-java-driver:${versions.mongodriver}"
}

sourceSets {
    main {
        resources.srcDirs = ['src/main/resources', 'src/test/resources']
        java {
            srcDirs = ['src/main/java', 'src/test/java']
        }
    }
    test {
        resources.srcDirs = ['src/test/resources']
        java {
            srcDirs = ['src/main/java', 'src/test/java']
        }
    }
}

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
        useDefaultListeners = true
    }
}

ext {
    if (!project.hasProperty('suiteFile')) {
        suiteFile = 'testng.xml'
    }
}

task runRegression(type: Test, description: "Runs Integration Tests", group: "Verification") {
    useTestNG {
        suites "src/test/" + suiteFile
        options {
            setParallel('tests')
            setThreadCount(5)
        }
    }

    onlyIf { !System.getProperty('buildType') }
    onlyIf { !System.getProperty('hikari_build_type') }

    options {
        if (System.properties['group']) includeGroups System.properties['group']
        systemProperties(System.getProperties())
    }
}


tasks.named('test') {
    useJUnitPlatform()
}
